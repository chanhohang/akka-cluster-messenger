akka {
  loglevel = "DEBUG"

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"


  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    serializers {
      java = "akka.serialization.JavaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
      custom = "com.github.chanhohang.akka.serialization.JsonSerializer"
    }
    
    serialization-bindings {
      "java.lang.String" = java
      "com.github.chanhohang.akka.message.AkkaEnvelope" = custom
      "com.google.protobuf.Message" = proto
    }
  }

  remote {
      netty.tcp {
      hostname = "127.0.0.1"
      port = 2551
    }  
  }

  cluster {
    seed-nodes = [
      "akka.tcp://system@127.0.0.1:2551",
      "akka.tcp://system@127.0.0.1:2552",
    ]

    roles = [TEST]
    
    auto-down-unreachable-after = 10s

  	pub-sub {
  	
	  # Actor name of the mediator actor, /user/distributedPubSubMediator
	  name = distributedPubSubMediator
	
	  # Start the mediator on members tagged with this role.
	  # All members are used if undefined or empty.
	  role = ""
	
	  # The routing logic to use for 'Send'
	  # Possible values: random, round-robin, broadcast
	  routing-logic = random
	
	  # How often the DistributedPubSubMediator should send out gossip information
	  gossip-interval = 1s
	
	  # Removed entries are pruned after this duration
	  removed-time-to-live = 120s
	
	  # Maximum number of elements to transfer in one message when synchronizing the registries.
	  # Next chunk will be transferred in next round of gossip.
	  max-delta-elements = 3000
  	}

  }
  persistence {
    journal.plugin = "inmemory-journal"
    snapshot-store.plugin = "inmemory-snapshot-store"
  }

}

inmemory-read-journal {
  # Implementation class of the InMemory ReadJournalProvider
  class = "akka.persistence.inmemory.query.InMemoryReadJournalProvider"

  # Absolute path to the write journal plugin configuration section to get the event adapters from
  write-plugin = "inmemory-journal"

  # there are two modes; sequence or uuid. If set to "sequence" and NoOffset will be requested, then
  # the query will return Sequence offset types. If set to "uuid" and NoOffset will be requested, then
  # the query will return TimeBasedUUID offset types. When the query is called with Sequence then
  # the query will return Sequence offset types and if the query is called with TimeBasedUUID types then
  # the query will return TimeBasedUUID offset types.
  offset-mode = "sequence"

  # ask timeout on Futures
  ask-timeout = "10s"

  # New events are retrieved (polled) with this interval.
  refresh-interval = "100ms"

  # How many events to fetch in one query (replay) and keep buffered until they
  # are delivered downstreams.
  max-buffer-size = "100"
}